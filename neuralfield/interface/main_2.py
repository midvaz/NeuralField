"""Desktop interface for Agriculture‚ÄëVision field analysis (Flet ‚â•‚ÄØ0.28.3).

Features (desktop & web):
- Pick an image via file dialog.
- Show original photo side‚Äëby‚Äëside with ML‚Äëprocessed segmentation overlay.
- Display detected Agriculture‚ÄëVision classes, per‚Äëclass agronomic recommendations and optional GPS coordinates.

üí° Replace the stub `analyze_image()` with your own pipeline returning:
```python
classes: List[str]                           # detected class names
overlay_path: pathlib.Path                  # PNG/JPG with segmentation overlay
latlon: Optional[Tuple[float, float]]       # (lat, lon) or None if unavailable
```
"""

from __future__ import annotations

import random
import tempfile
from pathlib import Path
from typing import List, Tuple, Optional

import flet as ft
from PIL import Image, ImageDraw

# -----------------------------------------------------------------------------
# Agriculture‚ÄëVision label ‚Üí recommendation mapping
# -----------------------------------------------------------------------------
RECOMMENDATIONS = {
  "bare_soil": "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ—Å–µ–≤ –ø–æ–∫—Ä–æ–≤–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä –∏–ª–∏ –æ—Ç—Ä–µ–≥—É–ª–∏—Ä—É–π—Ç–µ –Ω–æ—Ä–º—É –≤—ã—Å–µ–≤–∞ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–æ–∫—Ä–æ–≤–∞ –ø–æ—á–≤—ã.",
  "cloud_shadow": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞—Ç–µ–Ω–µ–Ω–æ –æ–±–ª–∞–∫–æ–º ‚Äì –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å—ä–µ–º–∫—É –ø—Ä–∏ —è—Å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö.",
  "double_plant": "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–≤–æ–π–Ω–æ–µ –≤—ã—Å–µ–∏–≤–∞–Ω–∏–µ ‚Äì –ø–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–µ—è–ª–∫—É –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –≥—É—Å—Ç–æ—Ç—É –ø–æ—Å–µ–≤–∞.",
  "drydown": "–ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–µ—Ñ–∏—Ü–∏—Ç–∞ –≤–ª–∞–≥–∏ ‚Äì –æ—Ü–µ–Ω–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –∏—Ä—Ä–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞—Å—É—Ö–æ—É—Å—Ç–æ–π—á–∏–≤—ã–µ –≥–∏–±—Ä–∏–¥—ã.",
  "endrow": "–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–∞—Ö –ø–æ–ª—è ‚Äì —É—Ç–æ—á–Ω–∏—Ç–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º.",
  "nutrient_deficiency": "–í–µ—Ä–æ—è—Ç–µ–Ω –¥–µ—Ñ–∏—Ü–∏—Ç –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤ ‚Äì –ø—Ä–æ–≤–µ–¥–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –ø–æ—á–≤—ã –∏ –≤–Ω–µ—Å–∏—Ç–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–¥–æ–±—Ä–µ–Ω–∏—è.",
  "planter_skip": "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∏ –ø—Ä–∏ –≤—ã—Å–µ–≤–µ ‚Äì –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã—Å–µ–≤–∞—é—â–∏–µ —Å–µ–∫—Ü–∏–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∑–∞—Å–æ—Ä–æ–≤ –∏–ª–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π.",
  "storm_damage": "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø–æ–∫—Ä–æ–≤–∞ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤—É–µ—Ç –æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è—Ö –æ—Ç –ø–æ–≥–æ–¥—ã ‚Äì –æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ—Å–µ–≤–∞.",
  "water": "–ó–∞—Ç–æ–ø–ª–µ–Ω–∏–µ/–∑–∞–±–æ–ª–∞—á–∏–≤–∞–Ω–∏–µ ‚Äì —É–ª—É—á—à–∏—Ç–µ –¥—Ä–µ–Ω–∞–∂ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä–µ–Ω–∞–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —Ç–∞–º, –≥–¥–µ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ.",
  "weed_cluster": "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–∫–æ–ø–ª–µ–Ω–∏—è —Å–æ—Ä–Ω—è–∫–æ–≤ ‚Äì —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–∞—Ä–≥–µ—Ç–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≥–µ—Ä–±–∏—Ü–∏–¥–æ–≤ –∏–ª–∏ –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É."
}


# Pre‚Äëassigned demo colours per class (for dummy overlay)
CLASS_COLORS = {
    label: (
        random.randint(80, 255),
        random.randint(80, 255),
        random.randint(80, 255),
    )
    for label in RECOMMENDATIONS
}

# -----------------------------------------------------------------------------
# Utility helpers
# -----------------------------------------------------------------------------

def extract_gps_from_exif(img_path: Path) -> Optional[Tuple[float, float]]:
    """Extract (lat, lon) from EXIF GPS tags if present using ``piexif`` (optional)."""

    try:
        import piexif

        exif_dict = piexif.load(str(img_path))
        gps_ifd: dict = exif_dict.get("GPS", {})
        if not gps_ifd:
            return None

        def _convert(coord, ref):
            d, m, s = coord
            val = d[0] / d[1] + m[0] / m[1] / 60 + s[0] / s[1] / 3600
            if ref in [b"S", b"W"]:
                val = -val
            return val

        lat = _convert(gps_ifd[piexif.GPSIFD.GPSLatitude], gps_ifd[piexif.GPSIFD.GPSLatitudeRef])
        lon = _convert(gps_ifd[piexif.GPSIFD.GPSLongitude], gps_ifd[piexif.GPSIFD.GPSLongitudeRef])
        return lat, lon
    except Exception:
        return None


def dummy_overlay(img_path: Path, classes: List[str]) -> Path:
    """Generate a translucent coloured rectangle overlay ‚Äì stand‚Äëin for segmentation."""

    img = Image.open(img_path).convert("RGBA")
    mask = Image.new("RGBA", img.size, (0, 0, 0, 0))
    draw = ImageDraw.Draw(mask)

    for cls in classes:
        w, h = img.size
        x0, y0 = random.randint(0, w // 2), random.randint(0, h // 2)
        x1, y1 = random.randint(w // 2, w), random.randint(h // 2, h)
        # draw.rectangle([x0, y0, x1, y1], fill=CLASS_COLORS[cls] + (90,))

    blended = Image.alpha_composite(img, mask)
    out_path = Path(tempfile.gettempdir()) / f"processed_{img_path.stem}.png"
    blended.save(out_path)
    return out_path

# --- configuration -------------------------------------------------
MOCK_OVERLAY = Path(r"C:\\project\\NeuralField\\neuralfield\\data\\Frame 9dd2.png")
# # -------------------------------------------------------------------
# def analyze_image(original_path: Path):
#     """
#     Stub that always returns the same processed image and dummy results.
#     """
#     detected_classes = ["water", "weed_cluster"]  # –ª—é–±—ã–µ —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ
#     gps_coords = []                               # –∏–ª–∏ –∑–∞–≥–ª—É—à–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
#     return MOCK_OVERLAY, detected_classes, gps_coords
def analyze_image(img_path: Path) -> Tuple[List[str], Path, Optional[Tuple[float, float]]]:
    """*Stub* ‚ÄúML‚Äù pipeline to keep UI functional during development."""

    classes = random.sample(list(RECOMMENDATIONS), random.randint(1, 3))
    classes = [ "nutrient_deficiency"]
    # processed = dummy_overlay(img_path, classes)
    gps = extract_gps_from_exif(img_path)
    return classes, MOCK_OVERLAY, gps


# -----------------------------------------------------------------------------
# Flet application (desktop‚Äëfirst, also runs in web‚Äëruntime)
# -----------------------------------------------------------------------------

def main(page: ft.Page):
    # ‚Äî Page configuration ‚Äî
    page.title = "Field Analyzer ‚Äì Agriculture‚ÄëVision"
    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER
    page.scroll = ft.ScrollMode.AUTO  # enum stable in v0.28.3

    # ‚Äî UI controls ‚Äî
    original_img = ft.Image(width=380, height=380, fit=ft.ImageFit.CONTAIN)
    processed_img = ft.Image(width=380, height=380, fit=ft.ImageFit.CONTAIN)
    output_text = ft.Text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.", selectable=True)

    # File picker & callback
    picker = ft.FilePicker(on_result=lambda e: on_pick(e))
    page.overlay.append(picker)

    def on_pick(ev: ft.FilePickerResultEvent):
        if not ev.files:
            return
        path = Path(ev.files[0].path)
        original_img.src = path.as_posix()
        original_img.update()

        classes, overlay_path, gps = analyze_image(path)
        processed_img.src = overlay_path.as_posix()
        processed_img.update()

        lines = [f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã: {', '.join(classes)}"]
        for c in classes:
            lines.append(f"‚Üí {RECOMMENDATIONS[c]}")
        lines.append(
            f"GPS: {gps[0]:.6f}, {gps[1]:.6f}" if gps else "GPS: 46.97301519700154, 39.869000647871246."
        )
        output_text.value = "\n".join(lines)
        output_text.update()

    pick_btn = ft.ElevatedButton(
        text="–í—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        icon=ft.Icons.FOLDER_OPEN,
        on_click=lambda _: picker.pick_files(
            allow_multiple=False,
            file_type=ft.FilePickerFileType.IMAGE,
        ),
    )

    # Layout
    page.add(
        pick_btn,
        ft.Row(
            [original_img, processed_img],
            alignment=ft.MainAxisAlignment.SPACE_EVENLY,
        ),
        ft.Divider(),
        output_text,
    )


if __name__ == "__main__":
    # Flet runs in desktop runtime automatically when installed via flet‚Äëdesktop.
    ft.app(target=main)
